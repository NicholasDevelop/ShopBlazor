@page "/learnBlazor/lifecycle"
@using System.Threading

<h3>LifeCycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
@Count <button @onclick="StartCountdown">Start Countdown</button>

<div class="border">
    <_LifeCycleChild CountValue="@currentCount"></_LifeCycleChild>
</div>
<hr />

@foreach (var item in EventType)
{
    @item
    <hr />
}


@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }


    protected override void OnInitialized()
    {
        EventType.Add("OnInizialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInizializedAsync is called");
        //await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
        //await Task.Delay(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if(Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
